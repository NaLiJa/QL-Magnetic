        LIST

        INCLUDE 'win1_assembler_qdos1_in'
        INCLUDE 'win1_assembler_qdos2_in'
        INCLUDE 'win1_assembler_macro_lib'

        SECTION code

        XDEF    ipcom

*************************************************************************************
* QL IPC comms routine
* Shamelessly stolen from SMSQ/E
* Needs to be implemented here to provide a method for talking to the keyboard
* on a BBQL when interrupts are disabled and in Supervisor mode. SMSQ/E can do
* that, JS/MGE apparently as well, Minerva cannot.
*
* a3 points to IPC command string
* d1 holds the answer
*************************************************************************************

pc.ipcrd EQU    %00001110                ; IPC read bit
pc.ipcwr EQU    %00001100                ; IPC write bit
pc..ipca EQU      6                      ; IPC acknowledge
pc..ipcd EQU      7                      ; IPC data bit

; This routine processes a command for the IPC link. Interrupts are disabled.
; The nibbles / bytes of the command are pointed to by (a3), the first byte is
; the number of nibbles or bytes to send, this is followed by pairs of bytes,
; the first byte of the pair is the number of bits to send, followed by the
; the byte with the bits. The byte after the last send byte is the number of
; bits to receive (up to 32).
; 
; so: Command is _not_ the same format as for MT.IPCOM!!

; $9      read a row of the keyboard, 1 parameter
; 01      4 bits the row number
; 8 bits reply
keyrwCmd
        dc.b    2               ; 2 pairs
        dc.b    4               ; 4 bits of following byte
        dc.b    9               ; command "read keyboard"
        dc.b    4               ; 4 bits of following byte
        dc.b    1               ; keyrow 1
        dc.b    8               ; wait for 8 bit response from IPC

        dc.w    0

saveregs REG    d0/d2-d7/a0-a5
;------------------
ipcom:
ql_hcmds
        movem.l saveregs,-(sp)           ; save changed address registers
        lea     keyrwCmd(pc),a3          ; pointer to command
        lea     pc_ipcwr,a5
        lea     pc_ipcrd-pc_ipcwr(a5),a4 ; hardware addresses
;------------------
ql_hcmdw
        move.b  (a3)+,d1                 ; number of bytes to send

qlhc_loop
        move.b  (a3)+,d2                 ; bits in next byte
        moveq   #0,d0
        move.b  (a3)+,d0                 ; bits of next byte / nibble
        ror.w   d2,d0                    ; into top end of word
        bsr.s   qlhc_wloop

        subq.b  #1,d1
        bgt.s   qlhc_loop

        move.b  (a3)+,d2
        beq.s   qlhc_rts                  ; no reply

;-----------
ql_hcmdr
        moveq   #0,d1

qlhc_rloop
        move.b  #pc.ipcrd,(a5)
qlhc_rwait
        btst    #pc..ipca,(a4)           ; accepted yet?
        bne.s   qlhc_rwait               ; ... no
        move.b  (a4),d0                  ; rx bit in msb
        add.b   d0,d0                    ; ... in X
        roxl.w  #1,d1                    ; ... in bit 0

        subq.b  #1,d2                    ; next bit
        bgt.s   qlhc_rloop
qlhc_rts
        movem.l (sp)+,saveregs           ; restore registers
        rts

;--------------
ql_hcmdn
        ror.w   #4,d0                    ; nibble to send in top end
        moveq   #4,d2                    ; four bits
        bra.s   ql_hdcmd1
;--------------
ql_hcmdb
        lsl.w   #8,d0                    ; byte to send in top end
        moveq   #8,d2                    ; eight bits
ql_hdcmd1
        lea     pc_ipcwr,a5
        lea     pc_ipcrd-pc_ipcwr(a5),a4 ; hardware addresses

qlhc_wloop
        move.b  #pc.ipcwr>>2,d0          ; IPC write bits
        rol.w   #1,d0
        add.b   d0,d0                    ; bit to send in bit 1
        move.b  d0,(a5)
qlhc_wwait
        btst    #pc..ipca,(a4)           ; accepted yet?
        bne.s   qlhc_wwait               ; ... no

        subq.b  #1,d2
        bgt.s   qlhc_wloop
        rts

        END
